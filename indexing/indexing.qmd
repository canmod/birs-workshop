---
title: "Modular Compartmental Modelling as Data Prep"
subtitle: "With implementation in `macpan2`"
format: 
  revealjs:
    code-line-numbers: false
    keep-md: true
---

```{r, echo=FALSE}
library(macpan2)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "",
  echo = TRUE
)
```

## Model Development Cycle

![](images/public-health-modelling-cycle.drawio.png)

# McMasterPandemic Project History

## McMasterPandemic COVID-19 Model

![](images/flowchart1.png)

::: aside
[mac-theobio.github.io/covid-19](https://mac-theobio.github.io/covid-19)
:::

## COVID-19 Vaccination Model

![](images/flowchart2.png){.absolute left=0 width="700"}

::: aside
[mac-theobio.github.io/covid-19](https://mac-theobio.github.io/covid-19)
:::

## Forecasting

```{r third_wave, echo = FALSE}
knitr::include_graphics("images/third_wave_prediction.gif")
```

::: aside
[mac-theobio.github.io/forecasts/outputs/ON_accuracy.html](https://mac-theobio.github.io/forecasts/outputs/ON_accuracy.html)
:::

## Calibration -- Trajectory Matching

::: columns
::: {.column width="40%"}
![](images/animation.gif)
:::

::: {.column width="60%"}
> -   Toy simulated data example
> -   "Observed" case reports -- dots
> -   Model-predicted case reports -- line
> -   Optimize transmission rate using maximum likelihood
:::
:::

## Examples of Usage

-   COVID-19 forecasts for agencies
    -   Public Health Agency of Canada
    -   Ontario Science Table
    -   World Health Organization
        -   South Africa -- provincial and national level
        -   Afro-Regional -- 49 countries
    -   Public Health Ontario

## Examples of Usage

-   Model structures
    -   Macpan modelling group's base COVID-19 model
    -   Extensions of macpan -- vaccination, VOC, and waste-water models
    -   Metapopulation model of Newfoundland -- 1000s of compartments
    -   Endemic COVID-19 model
    -   Monkeypox with two risk groups



## Software Timeline

```         
+-----------+------+-------------------------------------------------------+
| nickname  | year | description                                           |
+-----------+------+-------------------------------------------------------+
| macpan1   | 2020 | original covid models in R engine                     |
| macpan1.5 | 2021 | fast C++ engine and flexibility for VOC modelling     |
| macpan2   | 2023 | general architecture to implement the lessons learned |
+-----------+------+-------------------------------------------------------+
```

::: aside
macpan1 = [github.com/mac-theobio/McMasterPandemic/releases/tag/v0.0.20.1](https://github.com/mac-theobio/McMasterPandemic/releases/tag/v0.0.20.1)

macpan1.5 = [github.com/mac-theobio/McMasterPandemic](https://github.com/mac-theobio/McMasterPandemic)

macpan2 = [github.com/canmod/macpan2](https://github.com/canmod/macpan2)
:::


## Lessons -- modeller needs and wants

Biologically principled

Fast simulations and calibrations

Statistically principled

Functionality-rich

::: {.fragment .highlight-red}
Modular model building
:::

::: aside
[canmod.github.io/macpan-book/index.html#vision-and-direction](https://canmod.github.io/macpan-book/index.html#vision-and-direction)
:::

## Model Development Cycle

![](images/public-health-modelling-cycle.drawio.png)

## Model Development Cycle

![](images/public-health-modelling-cycle-highlight.drawio.png)

# Modular Model Building 

## Modularity Example (in early macpan)

![](images/flowchart1.png)

## Modularity Example (in early macpan)

![](images/flowchart2.png){.absolute left=0 width="850"}

## Modularity (graph theory)

::: fragment
![](images/wordenA.png)
:::

::: fragment
![](images/wordenB.png)
:::


::: aside
Worden and Porco (2017) Products of Compartmental Models in Epidemiology
:::

## Modularity (graph theory)


![](images/wordenC.png){width=50%}

::: aside
Worden and Porco (2017) Products of Compartmental Models in Epidemiology
:::

## Modularity (graph theory)


![](images/wordenD.png){width=60%}

::: aside
Worden and Porco (2017) Products of Compartmental Models in Epidemiology
:::


## Modularity (category theory)

![](images/categoryA.png){width=70%}

::: aside
Compositional Modeling with Stock and Flow Diagrams (2022) Baez et al.
:::

## Modularity (category theory)

![](images/categoryB.png){width=70%}

::: aside
Compositional Modeling with Stock and Flow Diagrams (2022) Baez et al.
:::


## Modularity (data prep 'theory')

What we do in `macpan2`

::: {.incremental}
* Represent structure of model components (e.g. state variables, flow rates) as data tables
* Use data table manipulation tools (e.g. join, group-by) to combine model structures
:::

## SIR Example

::: {.incremental}
* State variables ($S$, $I$, $R$)
* State variable aggregation ($N = S + I + R$)
* Transmission rate ($\beta$)
* Flow rates ($\lambda = \frac{\beta I}{N}$, $\gamma$)
:::

```{dot}
//| fig-height: 2
digraph G {
  layout=dot
  rankdir="LR"
  
  
  node [fontcolor=blue fontname="Courier New"]
  edge [fontcolor=blue fontname="Courier New"]
  
  SI [label=<&lambda;*S> shape=plaintext]
  IR [label=<&gamma;*I> shape=plaintext]
  
  S:e->SI:w [arrowhead=none]
  SI:e->I:w 
  I:e->IR:w [arrowhead=none]
  IR:e->R:w
  I:s->SI:s [label=<&lambda;=&beta;*I/N> style=dotted]
}
```


## Expressing SIR in Data Prep Language

::: fragment
```{r}
state_sir = mp_index(Epi = c("S", "I", "R"))
```
```{r, echo = FALSE}
state_sir
```
:::

::: fragment
```{r}
flow_rates_sir = mp_index(Epi = c("lambda", "gamma"))
```
```{r, echo = FALSE}
flow_rates_sir
```
:::

::: fragment
```{r}
trans_rates_sir = mp_index(Epi = c("beta"))
```
```{r, echo = FALSE}
trans_rates_sir
```
:::

## Structured Product Models

::: fragment
```{r}
cities = mp_index(Loc = c("cal", "ham", "que"))
```
:::

::: fragment
```{r}
state = mp_cartesian(state_sir, cities)
```
```{r, echo = FALSE}
state
```
:::

::: fragment
```{r, eval = FALSE}
labels(state)
```
```{r, echo = FALSE}
labels(state)
```
:::

## Structured Product Models

```{r}
flow_rates = mp_cartesian(flow_rates_sir, cities)
```
```{r, echo =FALSE}
flow_rates
```

## Non-Product Models

```{r}
flow_rates = mp_union(
  mp_cartesian(
    mp_subset(flow_rates_sir, Epi = "lambda"), 
    cities
  ),
  mp_subset(flow_rates_sir, Epi = "gamma")
)
```
```{r, echo =FALSE}
flow_rates
```

## Defining Flow Mechanisms

In simple models, defining a flow mechanism take three steps:

1. Choose a `from` compartment
2. Choose a `to` compartment
3. Choose a `rate` of flow
```{dot}
//| fig-height: 2
digraph G {
  layout=dot
  rankdir="LR"
  
  node [margin=0 fontcolor=blue fontname="Courier New" width=0.5]
  edge [fontcolor=blue fontname="Courier New"]
  
  S->I [style=invis];
  I->R [style=invis];
}
```

## Defining Flow Mechanisms

In simple models, defining a flow mechanism take three steps:

1. Choose a `from` compartment (e.g. $S$)
2. Choose a `to` compartment (e.g. $I$)
3. Choose a `rate` of flow (e.g. $\lambda = \frac{\beta I}{N}$)
```{dot}
//| fig-height: 2
digraph G {
  layout=dot
  rankdir="LR"
  
  node [margin=0 fontcolor=blue fontname="Courier New" width=0.5]
  edge [fontcolor=blue fontname="Courier New"]
  
  S->I [label=<&lambda;*S>];
  I->R [style=invis];
}
```

## Defining Flows in Structured Models

```{dot}
//| fig-height: 4
digraph G {
  layout=dot
  rankdir="LR"
  
  node [margin=0 fontcolor=blue fontname="Courier New" width=0.5]
  edge [fontcolor=blue fontname="Courier New"]
  
  S1 [label="S.cal"];
  I1 [label="I.cal"];
  R1 [label="R.cal"];
  
  S2 [label="S.ham"];
  I2 [label="I.ham"];
  R2 [label="R.ham"];
  
  S3 [label="S.que"];
  I3 [label="I.que"];
  R3 [label="R.que"];
  
  S1->I1 [label=<&lambda;&#46;cal*S&#46;cal>];
  S2->I2 [label=<&lambda;&#46;ham*S&#46;ham>];
  S3->I3 [label=<&lambda;&#46;que*S&#46;que>];
  
  I1->R1 [style=invis];
  I2->R2 [style=invis];
  I3->R3 [style=invis];
}
```

## Defining Flows in Structured Models

::: fragment
One more step in structured models.
:::

::: fragment
The first three are _similar_.

1. Choose a _set of_ `from` compartments
2. Choose a _set of_ `to` compartments
3. Choose a _set of_ `rate`s of flow
:::

::: fragment
The last step is new.

4. Match the elements of the `from`, `to`, and `rate` sets
:::

## Defining Flows in Structured Models

::: {.fragment}
 
```{r}
mp_subset(state, Epi = "S")
```
::: 


::: {.fragment}
 
```{r}
mp_subset(state, Epi = "I")
```
:::

::: {.fragment}
 
```{r}
mp_join(
  from = mp_subset(state, Epi = "S"), 
  to = mp_subset(state, Epi = "I"),
  by = "Loc"
)
```
:::

## Defining Flows in Structured Models

 
```{r}
mp_join(
  from = mp_subset(state, Epi = "S"), 
  to = mp_subset(state, Epi = "I"),
  by = "Loc"
)
```

## Defining Flows in Structured Models

```{r}
mp_join(
  from = mp_subset(state, Epi = "S"), 
  to = mp_subset(state, Epi = "I")
  # by = "Loc"
)
```

## Defining Flows Comparison

Unstructured Model:
```{r}
mp_join(
  from = mp_subset(state_sir, Epi = "S"), 
  to   = mp_subset(state_sir, Epi = "I")
)
```
Location-Structured Model:
```{r}
mp_join(
  from = mp_subset(state, Epi = "S"), 
  to   = mp_subset(state, Epi = "I"),
  by = "Loc"
)
```

## Transmission and Influences

```{r}
trans_rates = mp_cartesian(trans_rates_sir, cities)
```
```{r, echo = FALSE}
trans_rates
```


## Decomposing

```{r}

```

## Spatial Movement Rates

## Two-Strain Model

```{dot}
//| fig-height: 2
digraph G {
  layout=dot
  rankdir="LR"
  
  
  node [fontcolor=blue fontname="Courier New"]
  edge [fontcolor=blue fontname="Courier New"]
  
  SIa [label=<&lambda;*S> shape=plaintext]
  IaR [label=<&gamma;*I> shape=plaintext]
  
  S:e->SIa:w [arrowhead=none]
  SIa:e->Ia:w 
  Ia:e->IaR:w [arrowhead=none]
  IaR:e->R:w
  Ia:s->SIa:s [label=<&lambda;=&beta;*I.A/N> style=dotted]
}
```
